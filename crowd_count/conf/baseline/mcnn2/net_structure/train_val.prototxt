name: "CrowdCount"
layer {
  name: "crowd"
  type: "CrowdData"
  top: "image"
  top:"dmap"
  include {
    phase: TRAIN
  }
  transform_param {
    mean_value: 127.5
    mean_value: 127.5
    mean_value: 127.5
    mirror: false
    scale: 0.0078125
  }

  image_data_param {
    source: "path-to-training-sample"
    root_folder:"path-to-training-root"
    shuffle: true
    batch_size: 1
    times_split: 0
    downsamp_times: 2
    neighbor_num: 5
    dmap_online:true
    ksize_param: 0.25
    sigma_param: 0.12
    scale_param: 2
    is_augment:false
  }
}

layer {
  name: "crowd"
  type: "CrowdData"
  top: "image"
  top:"dmap"
  include {
    phase: TEST
  }
  transform_param {
    mean_value: 127.5
    mean_value: 127.5
    mean_value: 127.5
    mirror: false
    scale: 0.0078125
  }
  image_data_param {
    source: "path-to-validate-sample"
    root_folder:"path-to-validate-root"
    shuffle: true
    batch_size: 1
    times_split: 0
    downsamp_times: 2
    neighbor_num: 5
    dmap_online:true
    ksize_param: 0.25
    sigma_param: 0.12
    scale_param: 2
    is_augment:false
  }
}

layer {
  name: "conv1_1"
  type: "Convolution"
  bottom: "image"
  top: "conv1_1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 64
    pad: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "gaussian"
      std: 0.01000000
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu1_1"
  type: "ReLU"
  bottom: "conv1_1"
  top: "conv1_1"
}
layer {
  name: "conv1_2"
  type: "Convolution"
  bottom: "conv1_1"
  top: "conv1_2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 64
    pad: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "gaussian"
      std: 0.01000000
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu1_2"
  type: "ReLU"
  bottom: "conv1_2"
  top: "conv1_2"
}
layer {
  name: "pool1_2"
  type: "Pooling"
  bottom: "conv1_2"
  top: "pool1_2"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1_3"
  type: "Convolution"
  bottom: "pool1_2"
  top: "conv1_3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 128
    pad: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "gaussian"
      std: 0.01000000
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu1_3"
  type: "ReLU"
  bottom: "conv1_3"
  top: "conv1_3"
}
layer {
  name: "conv1_4"
  type: "Convolution"
  bottom: "conv1_3"
  top: "conv1_4"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 128
    pad: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "gaussian"
      std: 0.01000000
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu1_4"
  type: "ReLU"
  bottom: "conv1_4"
  top: "conv1_4"
}
layer {
  name: "pool1_4"
  type: "Pooling"
  bottom: "conv1_4"
  top: "pool1_4"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1_5"
  type: "Convolution"
  bottom: "pool1_4"
  top: "conv1_5"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
    stride: 1
    weight_filler {
      type: "gaussian"
      std: 0.01000000
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu1_5"
  type: "ReLU"
  bottom: "conv1_5"
  top: "conv1_5"
}
layer {
  name: "conv1_6"
  type: "Convolution"
  bottom: "conv1_5"
  top: "conv1_6"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
    stride: 1
    weight_filler {
      type: "gaussian"
      std: 0.01000000
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu1_6"
  type: "ReLU"
  bottom: "conv1_6"
  top: "conv1_6"
}


#################### kernel 7########
layer {
  name: "conv2_1"
  type: "Convolution"
  bottom: "image"
  top: "conv2_1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 64
    pad: 3
    kernel_size: 7
    stride: 1
    weight_filler {
      type: "gaussian"
      std: 0.01000000
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu2_1"
  type: "ReLU"
  bottom: "conv2_1"
  top: "conv2_1"
}
layer {
  name: "conv2_2"
  type: "Convolution"
  bottom: "conv2_1"
  top: "conv2_2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 64
    pad: 3
    kernel_size: 7
    stride: 1
    weight_filler {
      type: "gaussian"
      std: 0.01000000
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu2_2"
  type: "ReLU"
  bottom: "conv2_2"
  top: "conv2_2"
}
layer {
  name: "pool2_2"
  type: "Pooling"
  bottom: "conv2_2"
  top: "pool2_2"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv2_3"
  type: "Convolution"
  bottom: "pool2_2"
  top: "conv2_3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 128
    pad: 3
    kernel_size: 7
    stride: 1
    weight_filler {
      type: "gaussian"
      std: 0.01000000
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu2_3"
  type: "ReLU"
  bottom: "conv2_3"
  top: "conv2_3"
}
layer {
  name: "conv2_4"
  type: "Convolution"
  bottom: "conv2_3"
  top: "conv2_4"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 128
    pad: 3
    kernel_size: 7
    stride: 1
    weight_filler {
      type: "gaussian"
      std: 0.01000000
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu2_4"
  type: "ReLU"
  bottom: "conv2_4"
  top: "conv2_4"
}
layer {
  name: "pool2_4"
  type: "Pooling"
  bottom: "conv2_4"
  top: "pool2_4"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv2_5"
  type: "Convolution"
  bottom: "pool2_4"
  top: "conv2_5"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 256
    pad: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "gaussian"
      std: 0.01000000
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu2_5"
  type: "ReLU"
  bottom: "conv2_5"
  top: "conv2_5"
}
layer {
  name: "conv2_6"
  type: "Convolution"
  bottom: "conv2_5"
  top: "conv2_6"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 256
    pad: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "gaussian"
      std: 0.01000000
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu2_6"
  type: "ReLU"
  bottom: "conv2_6"
  top: "conv2_6"
}


###############################

layer {
  name: "concat"
  bottom: "conv1_6"
  bottom: "conv2_6"
  top: "concat"
  type: "Concat"
  concat_param {
    axis: 1
  }
}


layer {
  name: "conv"
  type: "Convolution"
  bottom: "concat"
  top: "estdmap"
  convolution_param {
    num_output: 1
    kernel_size:1
    weight_filler {
      type: "gaussian"
      std: 0.01000000
    }
  }
}


layer {
  name: "re_gtcount"
  type: "Reduction"
  bottom: "dmap"
  top: "gtcount"
  reduction_param{
     axis:1
  }
}

layer {
  name: "re_estcount"
  type: "Reduction"
  bottom: "estdmap"
  top: "estcount"
  reduction_param{
     axis:1
  }
}

layer {
  name: "re_estcount_1"
  type: "Reduction"
  bottom: "estdmap"
  top: "estcount_1"
  reduction_param{
     axis:1
  }
}

layer {
  name: "re_gtcount_1"
  type: "Reduction"
  bottom: "dmap"
  top: "gtcount_1"
  reduction_param{
     axis:1
  }
}

layer {
  name: "loss"
  type: "EuclideanLoss"
  bottom: "estdmap"
  bottom: "dmap"
  top: "loss"
}

layer {
  name: "loss2"
  type: "EuclideanLoss"
  bottom: "gtcount"
  bottom: "estcount"
  top: "loss2"

  loss_weight:0.00004 
}

